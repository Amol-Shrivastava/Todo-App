[{"E:\\amol\\codes\\Web development\\frontendmentor\\Junior challenges\\todo-app-main\\todo-app-main\\src\\index.js":"1","E:\\amol\\codes\\Web development\\frontendmentor\\Junior challenges\\todo-app-main\\todo-app-main\\src\\App.js":"2","E:\\amol\\codes\\Web development\\frontendmentor\\Junior challenges\\todo-app-main\\todo-app-main\\src\\reportWebVitals.js":"3","E:\\amol\\codes\\Web development\\frontendmentor\\Junior challenges\\todo-app-main\\todo-app-main\\src\\components\\TodoForm.js":"4","E:\\amol\\codes\\Web development\\frontendmentor\\Junior challenges\\todo-app-main\\todo-app-main\\src\\components\\TodoList.js":"5"},{"size":478,"mtime":1610478625234,"results":"6","hashOfConfig":"7"},{"size":5038,"mtime":1612169871071,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":691,"mtime":1611650677403,"results":"10","hashOfConfig":"7"},{"size":5926,"mtime":1612117429920,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"tnwerg",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"14"},"E:\\amol\\codes\\Web development\\frontendmentor\\Junior challenges\\todo-app-main\\todo-app-main\\src\\index.js",[],["25","26"],"E:\\amol\\codes\\Web development\\frontendmentor\\Junior challenges\\todo-app-main\\todo-app-main\\src\\App.js",["27","28","29","30"],"import React, { useState, useEffect } from \"react\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\n\nimport \"./styles/app.scss\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [mode, setMode] = useState(\"light\");\n  const [status, setStatus] = useState(\"all\");\n  const [filteredArr, setFilteredArr] = useState([]);\n\n\n  //show mode according to previous mode\n  useEffect(() => {\n    getmodeLocal();\n  }, []);\n\n  //set local mode to light\n  useEffect(() => {\n    setmodeLocal();\n  }, [mode]);\n\n  //show content according to the btn\n  useEffect(() => {\n    filterHandler();\n  }, [status, todos]);\n\n  const completedArr = todos.filter((item) => item.completed === true);\n  const activeArr = todos.filter((item) => item.completed === false);\n\n  const clearCompletedHandler = () => {\n    setFilteredArr(todos.filter((item) => item.completed !== true));\n  };\n\n  const filterHandler = () => {\n    switch (status) {\n      case \"all\":\n        setFilteredArr(todos.filter((item) => item));\n        break;\n      case \"active\":\n        setFilteredArr(todos.filter((item) => item.completed === false));\n        break;\n      case \"completed\":\n        setFilteredArr(todos.filter((item) => item.completed === true));\n        break;\n      default:\n        setFilteredArr(todos.filter((item) => item));\n        break;\n    }\n  };\n\n  const setmodeLocal = () => {\n    localStorage.setItem(\"mode\", mode);\n  };\n\n  const getmodeLocal = () => {\n    if (localStorage.getItem(mode) === \"\") {\n      localStorage.setItem(\"mode\", \"light\");\n    } else {\n      let currentMode = localStorage.getItem(\"mode\");\n      setMode(currentMode);\n    }\n  };\n\n  const toggleHandler = () => {\n    {\n      mode === \"light\" ? setMode(\"dark\") : setMode(\"light\");\n    }\n  };\n\n  return (\n    <div className={`App ${mode === \"dark\" ? \"dark_class\" : \"\"}`}>\n      <div className=\"top_section\">\n        <div className=\"heading_part\">\n          <h1 className=\"heading\">Todo</h1>\n          <span className=\"toggle_btn\" onClick={toggleHandler}>\n            {mode === \"light\" ? (\n              <svg className=\"moon_svg\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M13 0c.81 0 1.603.074 2.373.216C10.593 1.199 7 5.43 7 10.5 7 16.299 11.701 21 17.5 21c2.996 0 5.7-1.255 7.613-3.268C23.22 22.572 18.51 26 13 26 5.82 26 0 20.18 0 13S5.82 0 13 0z\"\n                />\n              </svg>\n            ) : (\n              <svg className=\"sun_svg\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M13 21a1 1 0 011 1v3a1 1 0 11-2 0v-3a1 1 0 011-1zm-5.657-2.343a1 1 0 010 1.414l-2.121 2.121a1 1 0 01-1.414-1.414l2.12-2.121a1 1 0 011.415 0zm12.728 0l2.121 2.121a1 1 0 01-1.414 1.414l-2.121-2.12a1 1 0 011.414-1.415zM13 8a5 5 0 110 10 5 5 0 010-10zm12 4a1 1 0 110 2h-3a1 1 0 110-2h3zM4 12a1 1 0 110 2H1a1 1 0 110-2h3zm18.192-8.192a1 1 0 010 1.414l-2.12 2.121a1 1 0 01-1.415-1.414l2.121-2.121a1 1 0 011.414 0zm-16.97 0l2.121 2.12A1 1 0 015.93 7.344L3.808 5.222a1 1 0 011.414-1.414zM13 0a1 1 0 011 1v3a1 1 0 11-2 0V1a1 1 0 011-1z\"\n                />\n              </svg>\n            )}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"todo_form\">\n        <TodoForm\n          inputText={inputText}\n          setInputText={setInputText}\n          todos={todos}\n          setTodos={setTodos}\n        />\n      </div>\n\n      <div className=\"todo-content\">\n        <TodoList\n          todos={todos}\n          setTodos={setTodos}\n          setFilteredArr={setFilteredArr}\n          filteredArr={filteredArr}\n       \n        />\n\n        <div className=\"todo-details\">\n          <span className=\"todo-active\">\n            {activeArr.length}\n            {` ${activeArr.length <= 1 ? \"item\" : \"items\"}`} left\n          </span>\n\n          <span\n            className={`todo-clear-completed ${\n              completedArr.length !== 0 && status !== \"completed\"\n                ? \"activeBtn\"\n                : \"deactiveBtn\"\n            }`}\n            onClick={clearCompletedHandler}\n          >\n            Clear Completed\n          </span>\n        </div>\n\n        <div className=\"todos-btns\">\n          <button\n            className={`all_btn ${status === \"all\" ? \"active\" : \"\"}`}\n            onClick={() => setStatus(\"all\")}\n          >\n            All\n          </button>\n          <button\n            className={`active_btn ${status === \"active\" ? \"active\" : \"\"}`}\n            onClick={() => setStatus(\"active\")}\n          >\n            Active\n          </button>\n          <button\n            className={`completed_btn ${\n              status === \"completed\" ? \"active\" : \"\"\n            }`}\n            onClick={() => setStatus(\"completed\")}\n          >\n            Completed\n          </button>\n        </div>\n        {/* <span className=\"drag_text\"> Drag and drop to reorder list</span> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","E:\\amol\\codes\\Web development\\frontendmentor\\Junior challenges\\todo-app-main\\todo-app-main\\src\\reportWebVitals.js",[],"E:\\amol\\codes\\Web development\\frontendmentor\\Junior challenges\\todo-app-main\\todo-app-main\\src\\components\\TodoForm.js",[],"E:\\amol\\codes\\Web development\\frontendmentor\\Junior challenges\\todo-app-main\\todo-app-main\\src\\components\\TodoList.js",["31","32","33"],"import React, { useState, useEffect } from \"react\";\r\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nfunction TodoList({ todos, setTodos, filteredArr }) {\r\n  //******************************* */\r\n  // const [finalList, setFinalList] = useState(filteredArr);\r\n  //************************************** */\r\n\r\n  useEffect(() => {\r\n    getLocalTodos();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLocalTodos();\r\n  }, [todos]);\r\n\r\n  const setLocalTodos = () => {\r\n    localStorage.setItem(\"todo\", JSON.stringify(todos));\r\n  };\r\n\r\n  const getLocalTodos = () => {\r\n    if (localStorage.getItem(\"todo\") === null) {\r\n      localStorage.setItem(\"todo\", JSON.stringify([]));\r\n    } else {\r\n      let savedTodos = JSON.parse(localStorage.getItem(\"todo\"));\r\n      setTodos(savedTodos);\r\n    }\r\n  };\r\n\r\n  const deleteHandler = (e) => {\r\n    let targetedTodo = e.target.parentElement;\r\n    //filter existing todos without targetedTodo\r\n    let revisedTodos = todos.filter((todo) => todo.id !== targetedTodo.id);\r\n    //display new array on the screen\r\n    setTodos(revisedTodos);\r\n  };\r\n\r\n  const crossHandler = (e) => {\r\n    let targetedElement = e.target;\r\n    let targetElementId = targetedElement.parentElement.id;\r\n    setTodos(\r\n      todos.map((item) => {\r\n        if (item.id === targetElementId) {\r\n          return {\r\n            ...item,\r\n            completed: !item.completed,\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  //****************************************************** */\r\n  // const dragEndHandler = (result) => {\r\n  //   const items = Array.from(finalList);\r\n  //   const [reorderedItems] = items.splice(result.source.index, 1);\r\n  //   items.splice(result.destination.index,0, reorderedItems);\r\n\r\n  //   setFinalList(items);\r\n  // }\r\n  //****************************************************** */\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"todo-list-box\">\r\n        {/* <DragDropContext onDragEnd={dragEndHandler}>  */}\r\n        {/* <DragDropContext>\r\n          <Droppable droppableId=\"todos-list\">\r\n            {(provided) => (\r\n              <ul\r\n                className=\"todos-list-ul\"\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef} */}\r\n        {/* > */}\r\n        {/* {finalList.map({text, id, completed}, index) => } */}\r\n        {/* {filteredArr.map(({ text, id, completed }, index) => (\r\n                  <Draggable draggableId={text} key={id} id={id} index={index}>\r\n                    {(provided) => (\r\n                      <li\r\n                        className=\"todo-item\"\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                      >\r\n                        <div\r\n                          className={`circle ${\r\n                            completed ? \"checked\" : \"unchecked\"\r\n                          }`}\r\n                        >\r\n                          {completed ? (\r\n                            <svg\r\n                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path d=\"M0 11.522l1.578-1.626 7.734 4.619 13.335-12.526 1.353 1.354-14 18.646z\" />\r\n                            </svg>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </div>\r\n\r\n                        <span\r\n                          className={`text ${completed ? \"line_over\" : \"\"}`}\r\n                          onClick={crossHandler}\r\n                        >\r\n                          {text}\r\n                        </span>\r\n\r\n                        <button className=\"todo-delBtn\" onClick={deleteHandler}>\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            fillRule=\"evenodd\"\r\n                            clipRule=\"evenodd\"\r\n                          >\r\n                            <path d=\"M12 11.293l10.293-10.293.707.707-10.293 10.293 10.293 10.293-.707.707-10.293-10.293-10.293 10.293-.707-.707 10.293-10.293-10.293-10.293.707-.707 10.293 10.293z\" />\r\n                          </svg>\r\n                        </button>\r\n                      </li>\r\n                    )} */}\r\n        {/* </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </ul>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext> */}\r\n\r\n        <ul className=\"todos-list-ul\">\r\n          {filteredArr.map(({ text, id, completed }) => (\r\n            <li className=\"todo-item\" key={id} id={id}>\r\n              <div className={`circle ${completed ? \"checked\" : \"unchecked\"}`}>\r\n                {completed ? (\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n                    <path d=\"M0 11.522l1.578-1.626 7.734 4.619 13.335-12.526 1.353 1.354-14 18.646z\" />\r\n                  </svg>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n\r\n              <span\r\n                className={`text ${completed ? \"line_over\" : \"\"}`}\r\n                onClick={crossHandler}\r\n              >\r\n                {text}\r\n              </span>\r\n\r\n              <button className=\"todo-delBtn\" onClick={deleteHandler}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fillRule=\"evenodd\"\r\n                  clipRule=\"evenodd\"\r\n                >\r\n                  <path d=\"M12 11.293l10.293-10.293.707.707-10.293 10.293 10.293 10.293-.707.707-10.293-10.293-10.293 10.293-.707-.707 10.293-10.293-10.293-10.293.707-.707 10.293 10.293z\" />\r\n                </svg>\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":18,"column":6,"nodeType":"40","endLine":18,"endColumn":8,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":23,"column":6,"nodeType":"40","endLine":23,"endColumn":12,"suggestions":"43"},{"ruleId":"38","severity":1,"message":"44","line":28,"column":6,"nodeType":"40","endLine":28,"endColumn":21,"suggestions":"45"},{"ruleId":"46","severity":1,"message":"47","line":68,"column":5,"nodeType":"48","messageId":"49","endLine":70,"endColumn":6},{"ruleId":"50","severity":1,"message":"51","line":1,"column":17,"nodeType":"52","messageId":"53","endLine":1,"endColumn":25},{"ruleId":"38","severity":1,"message":"54","line":11,"column":6,"nodeType":"40","endLine":11,"endColumn":8,"suggestions":"55"},{"ruleId":"38","severity":1,"message":"56","line":15,"column":6,"nodeType":"40","endLine":15,"endColumn":13,"suggestions":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getmodeLocal'. Either include it or remove the dependency array.","ArrayExpression",["60"],"React Hook useEffect has a missing dependency: 'setmodeLocal'. Either include it or remove the dependency array.",["61"],"React Hook useEffect has a missing dependency: 'filterHandler'. Either include it or remove the dependency array.",["62"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getLocalTodos'. Either include it or remove the dependency array.",["63"],"React Hook useEffect has a missing dependency: 'setLocalTodos'. Either include it or remove the dependency array.",["64"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Update the dependencies array to be: [getmodeLocal]",{"range":"75","text":"76"},"Update the dependencies array to be: [mode, setmodeLocal]",{"range":"77","text":"78"},"Update the dependencies array to be: [filterHandler, status, todos]",{"range":"79","text":"80"},"Update the dependencies array to be: [getLocalTodos]",{"range":"81","text":"82"},"Update the dependencies array to be: [setLocalTodos, todos]",{"range":"83","text":"84"},[517,519],"[getmodeLocal]",[596,602],"[mode, setmodeLocal]",[690,705],"[filterHandler, status, todos]",[391,393],"[getLocalTodos]",[447,454],"[setLocalTodos, todos]"]