{"version":3,"sources":["components/TodoForm.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","inputText","setInputText","todos","setTodos","onSubmit","e","preventDefault","text","completed","id","uuidv4","type","name","className","value","placeholder","onChange","target","TodoList","filteredArr","useEffect","getLocalTodos","setLocalTodos","localStorage","setItem","JSON","stringify","getItem","savedTodos","parse","deleteHandler","targetedTodo","parentElement","revisedTodos","filter","todo","crossHandler","targetElementId","map","item","xmlns","viewBox","d","onClick","fillRule","clipRule","App","useState","mode","setMode","status","setStatus","setFilteredArr","getmodeLocal","setmodeLocal","filterHandler","completedArr","activeArr","currentMode","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e6992f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction TodoForm({ inputText, setInputText, todos, setTodos }) {\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    setTodos([\r\n      ...todos,\r\n      {\r\n        text: inputText,\r\n        completed: false,\r\n        id: uuidv4(),\r\n      },\r\n    ]);\r\n    setInputText(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <input\r\n        type=\"text\"\r\n        name=\"inputText\"\r\n        className=\"todo_input\"\r\n        value={inputText}\r\n        placeholder=\"Create a new todo...\"\r\n        onChange={(e) => setInputText(e.target.value)}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState, useEffect } from \"react\";\r\n// import { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nfunction TodoList({ todos, setTodos, filteredArr }) {\r\n  //******************************* */\r\n  // const [finalList, setFinalList] = useState(filteredArr);\r\n  //************************************** */\r\n\r\n  useEffect(() => {\r\n    getLocalTodos();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setLocalTodos();\r\n  }, [todos]);\r\n\r\n  const setLocalTodos = () => {\r\n    localStorage.setItem(\"todo\", JSON.stringify(todos));\r\n  };\r\n\r\n  const getLocalTodos = () => {\r\n    if (localStorage.getItem(\"todo\") === null) {\r\n      localStorage.setItem(\"todo\", JSON.stringify([]));\r\n    } else {\r\n      let savedTodos = JSON.parse(localStorage.getItem(\"todo\"));\r\n      setTodos(savedTodos);\r\n    }\r\n  };\r\n\r\n  const deleteHandler = (e) => {\r\n    let targetedTodo = e.target.parentElement;\r\n    //filter existing todos without targetedTodo\r\n    let revisedTodos = todos.filter((todo) => todo.id !== targetedTodo.id);\r\n    //display new array on the screen\r\n    setTodos(revisedTodos);\r\n  };\r\n\r\n  const crossHandler = (e) => {\r\n    let targetedElement = e.target;\r\n    let targetElementId = targetedElement.parentElement.id;\r\n    setTodos(\r\n      todos.map((item) => {\r\n        if (item.id === targetElementId) {\r\n          return {\r\n            ...item,\r\n            completed: !item.completed,\r\n          };\r\n        }\r\n        return item;\r\n      })\r\n    );\r\n  };\r\n\r\n  //****************************************************** */\r\n  // const dragEndHandler = (result) => {\r\n  //   const items = Array.from(finalList);\r\n  //   const [reorderedItems] = items.splice(result.source.index, 1);\r\n  //   items.splice(result.destination.index,0, reorderedItems);\r\n\r\n  //   setFinalList(items);\r\n  // }\r\n  //****************************************************** */\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"todo-list-box\">\r\n        {/* <DragDropContext onDragEnd={dragEndHandler}>  */}\r\n        {/* <DragDropContext>\r\n          <Droppable droppableId=\"todos-list\">\r\n            {(provided) => (\r\n              <ul\r\n                className=\"todos-list-ul\"\r\n                {...provided.droppableProps}\r\n                ref={provided.innerRef} */}\r\n        {/* > */}\r\n        {/* {finalList.map({text, id, completed}, index) => } */}\r\n        {/* {filteredArr.map(({ text, id, completed }, index) => (\r\n                  <Draggable draggableId={text} key={id} id={id} index={index}>\r\n                    {(provided) => (\r\n                      <li\r\n                        className=\"todo-item\"\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                      >\r\n                        <div\r\n                          className={`circle ${\r\n                            completed ? \"checked\" : \"unchecked\"\r\n                          }`}\r\n                        >\r\n                          {completed ? (\r\n                            <svg\r\n                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                              viewBox=\"0 0 24 24\"\r\n                            >\r\n                              <path d=\"M0 11.522l1.578-1.626 7.734 4.619 13.335-12.526 1.353 1.354-14 18.646z\" />\r\n                            </svg>\r\n                          ) : (\r\n                            \"\"\r\n                          )}\r\n                        </div>\r\n\r\n                        <span\r\n                          className={`text ${completed ? \"line_over\" : \"\"}`}\r\n                          onClick={crossHandler}\r\n                        >\r\n                          {text}\r\n                        </span>\r\n\r\n                        <button className=\"todo-delBtn\" onClick={deleteHandler}>\r\n                          <svg\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                            fillRule=\"evenodd\"\r\n                            clipRule=\"evenodd\"\r\n                          >\r\n                            <path d=\"M12 11.293l10.293-10.293.707.707-10.293 10.293 10.293 10.293-.707.707-10.293-10.293-10.293 10.293-.707-.707 10.293-10.293-10.293-10.293.707-.707 10.293 10.293z\" />\r\n                          </svg>\r\n                        </button>\r\n                      </li>\r\n                    )} */}\r\n        {/* </Draggable>\r\n                ))}\r\n                {provided.placeholder}\r\n              </ul>\r\n            )}\r\n          </Droppable>\r\n        </DragDropContext> */}\r\n\r\n        <ul className=\"todos-list-ul\">\r\n          {filteredArr.map(({ text, id, completed }) => (\r\n            <li className=\"todo-item\" key={id} id={id}>\r\n              <div className={`circle ${completed ? \"checked\" : \"unchecked\"}`}>\r\n                {completed ? (\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\r\n                    <path d=\"M0 11.522l1.578-1.626 7.734 4.619 13.335-12.526 1.353 1.354-14 18.646z\" />\r\n                  </svg>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n\r\n              <span\r\n                className={`text ${completed ? \"line_over\" : \"\"}`}\r\n                onClick={crossHandler}\r\n              >\r\n                {text}\r\n              </span>\r\n\r\n              <button className=\"todo-delBtn\" onClick={deleteHandler}>\r\n                <svg\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  fillRule=\"evenodd\"\r\n                  clipRule=\"evenodd\"\r\n                >\r\n                  <path d=\"M12 11.293l10.293-10.293.707.707-10.293 10.293 10.293 10.293-.707.707-10.293-10.293-10.293 10.293-.707-.707 10.293-10.293-10.293-10.293.707-.707 10.293 10.293z\" />\r\n                </svg>\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useState, useEffect } from \"react\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\n\nimport \"./styles/app.scss\";\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [mode, setMode] = useState(\"light\");\n  const [status, setStatus] = useState(\"all\");\n  const [filteredArr, setFilteredArr] = useState([]);\n\n\n  //show mode according to previous mode\n  useEffect(() => {\n    getmodeLocal();\n  }, []);\n\n  //set local mode to light\n  useEffect(() => {\n    setmodeLocal();\n  }, [mode]);\n\n  //show content according to the btn\n  useEffect(() => {\n    filterHandler();\n  }, [status, todos]);\n\n  const completedArr = todos.filter((item) => item.completed === true);\n  const activeArr = todos.filter((item) => item.completed === false);\n\n  const clearCompletedHandler = () => {\n    setFilteredArr(todos.filter((item) => item.completed !== true));\n  };\n\n  const filterHandler = () => {\n    switch (status) {\n      case \"all\":\n        setFilteredArr(todos.filter((item) => item));\n        break;\n      case \"active\":\n        setFilteredArr(todos.filter((item) => item.completed === false));\n        break;\n      case \"completed\":\n        setFilteredArr(todos.filter((item) => item.completed === true));\n        break;\n      default:\n        setFilteredArr(todos.filter((item) => item));\n        break;\n    }\n  };\n\n  const setmodeLocal = () => {\n    localStorage.setItem(\"mode\", mode);\n  };\n\n  const getmodeLocal = () => {\n    if (localStorage.getItem(mode) === \"\") {\n      localStorage.setItem(\"mode\", \"light\");\n    } else {\n      let currentMode = localStorage.getItem(\"mode\");\n      setMode(currentMode);\n    }\n  };\n\n  const toggleHandler = () => {\n    {\n      mode === \"light\" ? setMode(\"dark\") : setMode(\"light\");\n    }\n  };\n\n  return (\n    <div className={`App ${mode === \"dark\" ? \"dark_class\" : \"\"}`}>\n      <div className=\"top_section\">\n        <div className=\"heading_part\">\n          <h1 className=\"heading\">Todo</h1>\n          <span className=\"toggle_btn\" onClick={toggleHandler}>\n            {mode === \"light\" ? (\n              <svg className=\"moon_svg\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M13 0c.81 0 1.603.074 2.373.216C10.593 1.199 7 5.43 7 10.5 7 16.299 11.701 21 17.5 21c2.996 0 5.7-1.255 7.613-3.268C23.22 22.572 18.51 26 13 26 5.82 26 0 20.18 0 13S5.82 0 13 0z\"\n                />\n              </svg>\n            ) : (\n              <svg className=\"sun_svg\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M13 21a1 1 0 011 1v3a1 1 0 11-2 0v-3a1 1 0 011-1zm-5.657-2.343a1 1 0 010 1.414l-2.121 2.121a1 1 0 01-1.414-1.414l2.12-2.121a1 1 0 011.415 0zm12.728 0l2.121 2.121a1 1 0 01-1.414 1.414l-2.121-2.12a1 1 0 011.414-1.415zM13 8a5 5 0 110 10 5 5 0 010-10zm12 4a1 1 0 110 2h-3a1 1 0 110-2h3zM4 12a1 1 0 110 2H1a1 1 0 110-2h3zm18.192-8.192a1 1 0 010 1.414l-2.12 2.121a1 1 0 01-1.415-1.414l2.121-2.121a1 1 0 011.414 0zm-16.97 0l2.121 2.12A1 1 0 015.93 7.344L3.808 5.222a1 1 0 011.414-1.414zM13 0a1 1 0 011 1v3a1 1 0 11-2 0V1a1 1 0 011-1z\"\n                />\n              </svg>\n            )}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"todo_form\">\n        <TodoForm\n          inputText={inputText}\n          setInputText={setInputText}\n          todos={todos}\n          setTodos={setTodos}\n        />\n      </div>\n\n      <div className=\"todo-content\">\n        <TodoList\n          todos={todos}\n          setTodos={setTodos}\n          setFilteredArr={setFilteredArr}\n          filteredArr={filteredArr}\n       \n        />\n\n        <div className=\"todo-details\">\n          <span className=\"todo-active\">\n            {activeArr.length}\n            {` ${activeArr.length <= 1 ? \"item\" : \"items\"}`} left\n          </span>\n\n          <span\n            className={`todo-clear-completed ${\n              completedArr.length !== 0 && status !== \"completed\"\n                ? \"activeBtn\"\n                : \"deactiveBtn\"\n            }`}\n            onClick={clearCompletedHandler}\n          >\n            Clear Completed\n          </span>\n        </div>\n\n        <div className=\"todos-btns\">\n          <button\n            className={`all_btn ${status === \"all\" ? \"active\" : \"\"}`}\n            onClick={() => setStatus(\"all\")}\n          >\n            All\n          </button>\n          <button\n            className={`active_btn ${status === \"active\" ? \"active\" : \"\"}`}\n            onClick={() => setStatus(\"active\")}\n          >\n            Active\n          </button>\n          <button\n            className={`completed_btn ${\n              status === \"completed\" ? \"active\" : \"\"\n            }`}\n            onClick={() => setStatus(\"completed\")}\n          >\n            Completed\n          </button>\n        </div>\n        <span className=\"drag_text\"> Drag and drop to reorder list</span>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}